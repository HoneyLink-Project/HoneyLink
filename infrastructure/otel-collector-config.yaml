# OpenTelemetry Collector Configuration for HoneyLink
# Receives telemetry from honeylink-telemetry crate via OTLP/gRPC
# Exports to Prometheus (metrics), Jaeger (traces), and Loki (logs)

receivers:
  # OTLP receiver for gRPC (default port 4317)
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
        # TLS configuration (production)
        tls:
          cert_file: /etc/otel/certs/server.crt
          key_file: /etc/otel/certs/server.key
          client_ca_file: /etc/otel/certs/ca.crt
      http:
        endpoint: 0.0.0.0:4318

  # Prometheus receiver (scrape metrics endpoint)
  prometheus:
    config:
      scrape_configs:
        - job_name: 'honeylink-telemetry'
          scrape_interval: 15s
          static_configs:
            - targets: ['localhost:8888']  # OTEL Collector internal metrics

processors:
  # Batch processor to reduce network overhead
  batch:
    timeout: 10s
    send_batch_size: 1024
    send_batch_max_size: 2048

  # Memory limiter to prevent OOM
  memory_limiter:
    check_interval: 1s
    limit_mib: 512
    spike_limit_mib: 128

  # Resource processor to add service metadata
  resource:
    attributes:
      - key: service.name
        value: honeylink
        action: upsert
      - key: service.version
        value: ${HONEYLINK_VERSION:-0.1.0}
        action: upsert
      - key: deployment.environment
        value: ${ENVIRONMENT:-development}
        action: upsert

  # Attributes processor for filtering/transformation
  attributes:
    actions:
      # Drop internal OTEL attributes
      - key: otel.*
        action: delete

exporters:
  # Prometheus exporter (metrics)
  prometheus:
    endpoint: "0.0.0.0:9090"
    namespace: honeylink
    const_labels:
      environment: ${ENVIRONMENT:-development}

  # Jaeger exporter (traces)
  jaeger:
    endpoint: ${JAEGER_ENDPOINT:-jaeger:14250}
    tls:
      insecure: false
      cert_file: /etc/otel/certs/client.crt
      key_file: /etc/otel/certs/client.key
      ca_file: /etc/otel/certs/ca.crt

  # Loki exporter (logs)
  loki:
    endpoint: ${LOKI_ENDPOINT:-http://loki:3100/loki/api/v1/push}
    labels:
      attributes:
        service.name: ""
        severity: ""
      resource:
        deployment.environment: ""

  # Logging exporter for debugging (dev only)
  logging:
    loglevel: info
    sampling_initial: 5
    sampling_thereafter: 200

  # File exporter for local debugging
  file:
    path: /var/log/otel/traces.json
    rotation:
      max_megabytes: 100
      max_days: 7
      max_backups: 3

service:
  pipelines:
    # Traces pipeline
    traces:
      receivers: [otlp]
      processors: [memory_limiter, batch, resource, attributes]
      exporters: [jaeger, logging, file]

    # Metrics pipeline
    metrics:
      receivers: [otlp, prometheus]
      processors: [memory_limiter, batch, resource]
      exporters: [prometheus, logging]

    # Logs pipeline
    logs:
      receivers: [otlp]
      processors: [memory_limiter, batch, resource, attributes]
      exporters: [loki, logging]

  # Telemetry configuration for OTEL Collector itself
  telemetry:
    logs:
      level: info
    metrics:
      address: 0.0.0.0:8888
      level: detailed

  # Extensions for health checks and profiling
  extensions: [health_check, pprof, zpages]

extensions:
  # Health check endpoint
  health_check:
    endpoint: 0.0.0.0:13133
    path: /health

  # Performance profiling (dev/staging only)
  pprof:
    endpoint: 0.0.0.0:1777

  # zPages for internal diagnostics
  zpages:
    endpoint: 0.0.0.0:55679
