name: Rust CI

on:
  push:
    branches: [master, develop]
    paths:
      - 'backend/**'
      - 'rust-toolchain.toml'
      - '.github/workflows/rust-ci.yml'
  pull_request:
    branches: [master, develop]
    paths:
      - 'backend/**'
      - 'rust-toolchain.toml'

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"  # Treat all warnings as errors in CI

jobs:
  # Job 1: Code formatting check
  format:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check formatting
        run: cargo fmt --all -- --check

  # Job 2: Clippy linting
  lint:
    name: Clippy Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "rust-lint"

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

  # Job 3: Build and test (Linux x86_64)
  test-linux:
    name: Test (Linux x86_64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "rust-test-linux"

      - name: Build workspace
        run: cargo build --workspace --all-features

      - name: Run tests
        run: cargo test --workspace --all-features

  # Job 4: WASM build verification
  test-wasm:
    name: Test (WASM)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain with WASM target
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "rust-test-wasm"

      - name: Install wasm-bindgen-cli
        run: cargo install wasm-bindgen-cli --locked

      - name: Build WASM targets
        run: |
          # Build all WASM-compatible crates
          # Adjust paths as workspace structure evolves
          if [ -d "backend/crates/experience" ]; then
            cd backend/crates/experience
            cargo build --target wasm32-unknown-unknown --release
          fi

      - name: Verify WASM output
        run: |
          # Check that .wasm files are generated
          find target/wasm32-unknown-unknown/release -name "*.wasm" -type f | head -n 5

  # Job 5: Code coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "rust-coverage"

      - name: Install cargo-llvm-cov
        run: cargo install cargo-llvm-cov --locked

      - name: Generate coverage report
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./lcov.info
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Enforce minimum coverage (80%)
        run: cargo llvm-cov --all-features --workspace --fail-under-lines 80

  # Job 6: Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "rust-security"

      - name: Install cargo-audit
        run: cargo install cargo-audit --locked

      - name: Run vulnerability scan
        run: cargo audit --deny warnings

      - name: Install cargo-deny
        run: cargo install cargo-deny --locked

      - name: Check dependency policies
        run: cargo deny check

  # Job 7: Build verification (release mode)
  build-release:
    name: Build Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "rust-build-release"

      - name: Build release artifacts
        run: cargo build --workspace --all-features --release

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rust-release-binaries
          path: target/release/
          retention-days: 7
