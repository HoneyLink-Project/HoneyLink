name: UI CI

on:
  push:
    branches: [master, develop]
    paths:
      - 'ui/**'
      - '.github/workflows/ui-ci.yml'
  pull_request:
    branches: [master, develop]
    paths:
      - 'ui/**'

env:
  NODE_VERSION: '22.15.0'
  PNPM_VERSION: '10.0.0'

jobs:
  # Job 1: ESLint and Prettier checks
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'ui/pnpm-lock.yaml'

      - name: Install dependencies
        run: |
          cd ui
          pnpm install --frozen-lockfile

      - name: Audit for C/C++ native modules
        run: node scripts/audit-native-deps.js

      - name: ESLint check
        run: |
          cd ui
          pnpm lint

      - name: Prettier format check
        run: |
          cd ui
          pnpm exec prettier --check "src/**/*.{ts,tsx,css,json}"

  # Job 2: TypeScript type checking
  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'ui/pnpm-lock.yaml'

      - name: Install dependencies
        run: |
          cd ui
          pnpm install --frozen-lockfile

      - name: Run TypeScript type check
        run: |
          cd ui
          pnpm type-check

  # Job 3: Unit tests with Vitest
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'ui/pnpm-lock.yaml'

      - name: Install dependencies
        run: |
          cd ui
          pnpm install --frozen-lockfile

      - name: Run unit tests
        run: |
          cd ui
          pnpm test:unit --run --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./ui/coverage/lcov.info
          flags: ui
          fail_ci_if_error: false

  # Job 4: Build production bundle
  build:
    name: Production Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'ui/pnpm-lock.yaml'

      - name: Install dependencies
        run: |
          cd ui
          pnpm install --frozen-lockfile

      - name: Build production bundle
        run: |
          cd ui
          pnpm build

      - name: Verify bundle size
        run: |
          cd ui
          # Check main bundle is under 500KB (gzipped)
          BUNDLE_SIZE=$(find dist/assets -name "index-*.js" -exec gzip -c {} \; | wc -c)
          echo "Main bundle size (gzipped): ${BUNDLE_SIZE} bytes"
          if [ ${BUNDLE_SIZE} -gt 512000 ]; then
            echo "Error: Bundle size exceeds 500KB limit"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ui-build
          path: ui/dist/
          retention-days: 7

  # Job 5: E2E tests with Playwright
  e2e:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'ui/pnpm-lock.yaml'

      - name: Install dependencies
        run: |
          cd ui
          pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: |
          cd ui
          pnpm exec playwright install --with-deps chromium

      - name: Run E2E tests
        run: |
          cd ui
          pnpm test:e2e

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: ui/playwright-report/
          retention-days: 7

  # Job 6: Accessibility audit
  accessibility:
    name: Accessibility Audit (axe-core)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: 'ui/pnpm-lock.yaml'

      - name: Install dependencies
        run: |
          cd ui
          pnpm install --frozen-lockfile

      - name: Build production bundle
        run: |
          cd ui
          pnpm build

      - name: Run accessibility tests
        run: |
          cd ui
          pnpm test:a11y
