# HoneyLink P2P Development Environment Configuration# HoneyLink Development Environment Configuration Template

##

# HoneyLink is a pure P2P (Peer-to-Peer) protocol - NO centralized servers.# This file documents all environment variables required for local development.

# This file contains local device configuration only.# DO NOT commit actual secrets to version control.

##

# Usage:# Usage:

#   1. Copy this file to `.env` in the project root#   1. Copy this file to `.env` in the project root

#   2. Customize values for your local device#   2. Fill in the values (or fetch from Vault/KMS)

#   3. Source the file: `source .env` (bash) or `. .env` (sh)#   3. Source the file: `source .env` (bash) or `. .env` (sh)

##

# Security Note:# Security Note:

#   All cryptographic keys are generated locally and never leave the device.#   All secrets should be retrieved from HashiCorp Vault or cloud KMS.

#   No cloud services or centralized key management required.#   Never hardcode production secrets in .env files.



# ========================================# ========================================

# Device Identity# Vault / KMS Configuration

# ========================================# ========================================



# Unique device ID (auto-generated on first run if not set)# HashiCorp Vault address (e.g., https://vault.example.com:8200)

# Format: UUID v7VAULT_ADDR=https://vault.example.com:8200

DEVICE_ID=

# Vault authentication method (token, oidc, kubernetes, etc.)

# Device friendly name (shown to peers during pairing)VAULT_AUTH_METHOD=oidc

DEVICE_NAME="My HoneyLink Device"

# Vault namespace (leave empty if not using Enterprise namespaces)

# Device type (phone, tablet, laptop, desktop, iot, headset, etc.)VAULT_NAMESPACE=

DEVICE_TYPE=laptop

# Vault role for secret access (specific to your auth method)

VAULT_ROLE=honeylink-dev

# ========================================

# Local Cryptography# KMS key ID for encryption at rest (AWS/GCP/Azure)

# ========================================# Example AWS: arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012

KMS_KEY_ID=

# Local key storage path (encrypted at rest)

KEY_STORAGE_PATH=~/.honeylink/keys

# ========================================

# Key rotation intervals (seconds)# Authentication & Authorization

KEY_ROTATION_DEVICE_INTERVAL=7776000      # 90 days# ========================================

KEY_ROTATION_SESSION_INTERVAL=86400       # 24 hours

# OIDC Provider configuration

# Automatic key backup to external storage (true/false)OIDC_ISSUER_URL=https://auth.example.com

KEY_BACKUP_ENABLED=falseOIDC_CLIENT_ID=honeylink-client-id

KEY_BACKUP_PATH=OIDC_AUDIENCE=honeylink-api



# OAuth2 scopes (space-separated)

# ========================================OIDC_SCOPES="openid profile email honeylink.read honeylink.write"

# P2P Discovery

# ========================================# JWT signing algorithm (RS256, ES256, etc.)

JWT_ALGORITHM=RS256

# Discovery protocols (comma-separated: mdns, ble, wifi_direct)

DISCOVERY_PROTOCOLS=mdns,ble

# ========================================

# mDNS service name# Cryptography Configuration

MDNS_SERVICE_NAME=_honeylink._tcp# ========================================



# mDNS port (for service announcement)# Root key material (NEVER commit real keys!)

MDNS_PORT=5353# This is for local development ONLY. Fetch from Vault in production.

# Generate with: cargo run --bin honeylink-keygen generate-root

# BLE advertising interval (milliseconds)HONEYLINK_ROOT_KEY=PLACEHOLDER_USE_VAULT_IN_PRODUCTION

BLE_ADVERTISING_INTERVAL=1000

# Key rotation policy (seconds)

# Discovery timeout (seconds)KEY_ROTATION_ROOT_INTERVAL=157680000      # 5 years

DISCOVERY_TIMEOUT=30KEY_ROTATION_DEVICE_INTERVAL=7776000      # 90 days

KEY_ROTATION_SESSION_INTERVAL=86400       # 24 hours



# ========================================# Grace period for key rotation (seconds)

# Pairing & TrustKEY_GRACE_PERIOD_ROOT=2592000             # 30 days

# ========================================KEY_GRACE_PERIOD_DEVICE=604800            # 7 days

KEY_GRACE_PERIOD_SESSION=3600             # 1 hour

# Pairing methods (qr_code, pin, nfc, proximity)

PAIRING_METHODS=qr_code,pin

# ========================================

# PIN code length (6-8 digits)# Logging & Observability

PAIRING_PIN_LENGTH=6# ========================================



# Pairing timeout (seconds)# Rust log level (error, warn, info, debug, trace)

PAIRING_TIMEOUT=300RUST_LOG=info



# Maximum trusted peers (0 = unlimited)# OpenTelemetry configuration

MAX_TRUSTED_PEERS=0OTEL_EXPORTER_OTLP_ENDPOINT=https://otel-collector.example.com:4317

OTEL_EXPORTER_OTLP_PROTOCOL=grpc

# Trusted peers storage pathOTEL_SERVICE_NAME=honeylink-dev

TRUSTED_PEERS_PATH=~/.honeylink/trusted_peers.jsonOTEL_RESOURCE_ATTRIBUTES="environment=dev,version=0.1.0"



# Tracing sample rate (0.0 to 1.0)

# ========================================OTEL_TRACES_SAMPLER=parentbased_traceidratio

# P2P TransportOTEL_TRACES_SAMPLER_ARG=0.1

# ========================================

# Metrics export interval (seconds)

# Preferred transport protocols (comma-separated: quic, webrtc, tcp)OTEL_METRIC_EXPORT_INTERVAL=60

TRANSPORT_PROTOCOLS=quic,webrtc



# QUIC port range (for incoming connections)# ========================================

QUIC_PORT_RANGE_START=50000# Database Configuration

QUIC_PORT_RANGE_END=50100# ========================================



# WebRTC STUN servers (for NAT traversal, comma-separated)# PostgreSQL connection

WEBRTC_STUN_SERVERS=stun:stun.l.google.com:19302,stun:stun1.l.google.com:19302# Format: postgres://user:password@host:port/database

# Use Vault dynamic secrets in production

# Maximum concurrent P2P sessionsDATABASE_URL=postgres://honeylink:dev_password@localhost:5432/honeylink_dev

MAX_CONCURRENT_SESSIONS=10

# Connection pool settings

DATABASE_MAX_CONNECTIONS=10

# ========================================DATABASE_MIN_CONNECTIONS=2

# QoS & Stream SchedulingDATABASE_CONNECT_TIMEOUT=30

# ========================================



# Default bandwidth allocation (High:Medium:Low priority)# ========================================

QOS_BANDWIDTH_ALLOCATION=25:60:15# Redis / Cache Configuration

# ========================================

# FEC strategy (none, light, heavy)

FEC_DEFAULT_STRATEGY=light# Redis connection

REDIS_URL=redis://localhost:6379/0

# Maximum concurrent streams per P2P session

MAX_STREAMS_PER_SESSION=100# Cache TTL (seconds)

CACHE_TTL_SESSION=3600

# Stream buffer size (bytes)CACHE_TTL_DEVICE=86400

STREAM_BUFFER_SIZE=65536



# ========================================

# ========================================# Control Plane API

# Local Telemetry# ========================================

# ========================================

# Control plane base URL

# Local telemetry collection (metrics stay on device)CONTROL_PLANE_API_URL=https://control.honeylink.local:8443

TELEMETRY_ENABLED=true

# mTLS certificate paths (for service-to-service auth)

# Telemetry storage pathMTLS_CERT_PATH=/etc/honeylink/certs/client.crt

TELEMETRY_STORAGE_PATH=~/.honeylink/metricsMTLS_KEY_PATH=/etc/honeylink/certs/client.key

MTLS_CA_PATH=/etc/honeylink/certs/ca.crt

# Telemetry retention (days)

TELEMETRY_RETENTION_DAYS=30

# ========================================

# OpenTelemetry export (optional - for local Grafana)# Session Orchestrator

OTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4317# ========================================

OTEL_SERVICE_NAME=honeylink-device

# Session defaults

# Rust log level (error, warn, info, debug, trace)SESSION_MAX_DURATION=43200                # 12 hours

RUST_LOG=infoSESSION_IDLE_TIMEOUT=1800                 # 30 minutes

SESSION_SLIDING_WINDOW=1800               # 30 minutes



# ========================================# Session storage backend (redis, postgres, memory)

# Physical AdaptersSESSION_STORAGE_BACKEND=redis

# ========================================



# Supported adapter types (comma-separated: wifi, bluetooth, ethernet, cellular)# ========================================

PHYSICAL_ADAPTERS=wifi,bluetooth# QoS & Transport

# ========================================

# Wi-Fi Direct support (true/false)

WIFI_DIRECT_ENABLED=true# Default bandwidth allocation (High:Medium:Low)

QOS_BANDWIDTH_ALLOCATION=25:60:15

# Bluetooth LE support (true/false)

BLE_ENABLED=true# FEC strategy (none, light, heavy)

FEC_DEFAULT_STRATEGY=light

# Ethernet fallback (true/false)

ETHERNET_ENABLED=true# Maximum concurrent streams per session

MAX_STREAMS_PER_SESSION=100



# ========================================

# UI & Experience# ========================================

# ========================================# Physical Adapter

# ========================================

# UI language (en, ja, es, zh)

UI_LANGUAGE=en# Supported adapter types (comma-separated)

PHYSICAL_ADAPTERS=wifi6e,wifi7,5g

# Theme (light, dark, auto)

UI_THEME=auto# Adapter configuration paths

WIFI_ADAPTER_CONFIG=/etc/honeylink/adapters/wifi.yaml

# Notifications (true/false)CELLULAR_ADAPTER_CONFIG=/etc/honeylink/adapters/5g.yaml

NOTIFICATIONS_ENABLED=true



# Auto-accept pairing from trusted peers (true/false)# ========================================

AUTO_ACCEPT_TRUSTED=false# Development Tools

# ========================================



# ========================================# Enable development mode (verbose logging, no auth, etc.)

# Development ToolsDEV_MODE=true

# ========================================

# Disable TLS certificate validation (DEV ONLY)

# Enable development mode (verbose logging, debug UI)INSECURE_SKIP_VERIFY=true

DEV_MODE=true

# Mock external services (true/false)

# Mock physical adapters (true/false - for testing without hardware)MOCK_VAULT=false

MOCK_ADAPTERS=falseMOCK_OIDC=false

MOCK_DATABASE=false

# Test data generation (for E2E tests)

TEST_SEED_DATA=false# Test data seed (for E2E tests)

TEST_SEED_DATA=true



# ========================================

# Feature Flags# ========================================

# ========================================# Feature Flags

# ========================================

# Enable experimental features

FEATURE_FLAG_WASM_SDK=true# Enable experimental features

FEATURE_FLAG_THZ_ADAPTER=falseFEATURE_FLAG_TELEMETRY_V2=false

FEATURE_FLAG_MESH_NETWORKING=falseFEATURE_FLAG_WASM_SDK=true

FEATURE_FLAG_THZ_ADAPTER=false



# ========================================

# Platform-Specific# ========================================

# ========================================# Platform-Specific

# ========================================

# WSL-specific configuration (Linux subsystem on Windows)

WSL_DISTRO_NAME=Ubuntu-22.04# WSL-specific configuration

WSL_HOST_IP=172.X.X.X  # Auto-detectedWSL_DISTRO_NAME=Ubuntu-22.04

WSL_HOST_IP=172.X.X.X  # Updated by setup-wsl.sh

# Windows Bluetooth adapter (if using native Windows BLE)

WINDOWS_BLE_ADAPTER=Auto# Windows host services (if running DBs on Windows host)

WINDOWS_HOST_POSTGRES_PORT=5432
WINDOWS_HOST_REDIS_PORT=6379
